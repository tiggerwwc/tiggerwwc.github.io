{"version":3,"sources":["components/AnimatedText/AnimatedText.tsx","pages/Home/Home.tsx","router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AnimatedText","children","status","className","dummyTextData","id","text","strong","Home","useState","activeSlide","setActiveSlide","previousSlide","setPreviousSlide","useEffect","map","textData","index","Fragment","key","type","onClick","targetSlide","length","toPrevSlide","toNextSlide","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAQaA,G,MAAe,SAAC,GAGf,IAFbC,EAEY,EAFZA,SACAC,EACY,EADZA,OAEA,OACC,yBAAKC,UAAS,4BAAuBD,IACpC,yBAAKC,UAAU,0BACbF,MCXCG,G,MAAgB,CACrB,CACCC,GAAI,QACJC,KAAM,oBACNC,OAAQ,oBAET,CACCF,GAAI,QACJC,KAAM,mBACNC,OAAQ,gBAET,CACCF,GAAI,QACJC,KAAM,gBACNC,OAAQ,oBAyEKC,EArEF,WAAO,IAAD,EACoBC,mBAAwB,MAD5C,mBACXC,EADW,KACEC,EADF,OAEwBF,mBAAwB,MAFhD,mBAEXG,EAFW,KAEIC,EAFJ,KAIlBC,qBAAU,WACTH,EAAe,KACb,IAoBH,OACC,yBAAKR,UAAU,eACd,yBAAKA,UAAU,wBACd,yBAAKA,UAAU,wBACbC,GAAiBA,EAAcW,KAAI,SAACC,EAAeC,GACnD,IAAIf,EAAS,GAOb,OANIQ,IAAgBO,IACnBf,EAAS,UAENU,IAAkBK,IACrBf,EAAS,YAGT,kBAAC,IAAMgB,SAAP,CAAgBC,IAAKH,EAASX,IAC7B,kBAAC,EAAD,CACCH,OAAQA,GAER,yBAAKC,UAAU,qBACd,8BAAOa,EAASV,MAChB,gCAASU,EAAST,eAOxB,yBAAKJ,UAAU,wBACd,4BACCiB,KAAK,SACLC,QAAS,kBA/CM,WACnB,IAAIC,GAAeZ,GAAe,GAAK,EACnCY,EAAc,IACjBA,EAAclB,EAAcmB,OAAS,GAEtCV,EAAiBH,GACjBC,EAAeW,GAyCIE,IACfrB,UAAU,0BAEX,4BACCiB,KAAK,SACLC,QAAS,kBA3CM,WACnB,IAAIC,GAAeZ,GAAe,GAAK,EACnCY,EAAclB,EAAcmB,OAAS,IACxCD,EAAc,GAEfT,EAAiBH,GACjBC,EAAeW,GAqCIG,IACftB,UAAU,8BC1ED,oBACd,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWpB,OCLrBqB,EAJO,kBACrB,kBAAC,EAAD,OCQmBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf55150e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AnimatedText.scss';\r\n\r\ninterface Props {\r\n\tstatus: string;\r\n\tchildren: JSX.Element[] | JSX.Element;\r\n}\r\n\r\nexport const AnimatedText = ({\r\n\tchildren,\r\n\tstatus,\r\n}: Props) => {\r\n\treturn (\r\n\t\t<div className={`animated-text mod-${status}`}>\r\n\t\t\t<div className=\"animated-text__content\">\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default AnimatedText;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { AnimatedText } from '../../components';\r\nimport './Home.scss';\r\n\r\nconst dummyTextData = [\r\n\t{\r\n\t\tid: 'txt-1',\r\n\t\ttext: 'Lorem Ipsum Dolor',\r\n\t\tstrong: 'Consectetur Elit',\r\n\t},\r\n\t{\r\n\t\tid: 'txt-2',\r\n\t\ttext: 'Omnis Iste Natus',\r\n\t\tstrong: 'Magna Aliqua',\r\n\t},\r\n\t{\r\n\t\tid: 'txt-3',\r\n\t\ttext: 'Quo Voluptas ',\r\n\t\tstrong: 'Nulla Pariatur',\r\n\t},\r\n];\r\n\r\nconst Home = () => {\r\n\tconst [activeSlide, setActiveSlide] = useState<number | null>(null);\r\n\tconst [previousSlide, setPreviousSlide] = useState<number | null>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetActiveSlide(0);\r\n\t}, []);\r\n\r\n\tconst toPrevSlide = () => {\r\n\t\tlet targetSlide = (activeSlide || 0) - 1;\r\n\t\tif (targetSlide < 0) {\r\n\t\t\ttargetSlide = dummyTextData.length - 1;\r\n\t\t}\r\n\t\tsetPreviousSlide(activeSlide);\r\n\t\tsetActiveSlide(targetSlide);\r\n\t};\r\n\r\n\tconst toNextSlide = () => {\r\n\t\tlet targetSlide = (activeSlide || 0) + 1;\r\n\t\tif (targetSlide > dummyTextData.length - 1) {\r\n\t\t\ttargetSlide = 0;\r\n\t\t}\r\n\t\tsetPreviousSlide(activeSlide);\r\n\t\tsetActiveSlide(targetSlide);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"home-banner\">\r\n\t\t\t<div className=\"home-banner__wrapper\">\r\n\t\t\t\t<div className=\"home-banner__content\">\r\n\t\t\t\t\t{dummyTextData && dummyTextData.map((textData: any, index: number) => {\r\n\t\t\t\t\t\tlet status = '';\r\n\t\t\t\t\t\tif (activeSlide === index) {\r\n\t\t\t\t\t\t\tstatus = 'active';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (previousSlide === index) {\r\n\t\t\t\t\t\t\tstatus = 'previous';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<React.Fragment key={textData.id}>\r\n\t\t\t\t\t\t\t\t<AnimatedText\r\n\t\t\t\t\t\t\t\t\tstatus={status}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className=\"home-banner__text\">\r\n\t\t\t\t\t\t\t\t\t\t<span>{textData.text}</span>\r\n\t\t\t\t\t\t\t\t\t\t<strong>{textData.strong}</strong>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</AnimatedText>\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"home-banner__control\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tonClick={() => toPrevSlide()}\r\n\t\t\t\t\t\tclassName=\"home-banner__btn-prev\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tonClick={() => toNextSlide()}\r\n\t\t\t\t\t\tclassName=\"home-banner__btn-next\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n} from 'react-router-dom';\r\n\r\nimport Home from '../pages/Home/Home';\r\n\r\nexport default () => (\r\n\t<Router>\r\n\t\t<Switch>\r\n\t\t\t<Route exact path=\"/\" component={Home} />\r\n\t\t</Switch>\r\n\t</Router>\r\n);\r\n","import React from 'react';\r\nimport MainRouter from './router';\r\n\r\nconst App: React.FC = () => (\r\n\t<MainRouter />\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}